openapi: 3.0.2
servers:
  - url: https://example.com/
info:
  title: GDOL
  version: 2.0.0
  description: API for GDOL
  termsOfService: none
  contact:
    name: Emonadeo
    email: emonadeo@gmail.com
    url: https://github.com/Emonadeo/GDOL
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
externalDocs:
  url: https://github.com/Emonadeo/GDOL
components:
  schemas:
    Error:
      type: object
      properties:
        error_message:
          type: string
      required:
        - error_message
    Level:
      type: object
      properties:
        id:
          type: integer
          example: 0
        gdId:
          type: integer
          example: 60587128
        name:
          type: string
          example: Chromatic Haze
        user:
          $ref: '#/components/schemas/User'
        verifier:
          $ref: '#/components/schemas/User'
        creators:
          type: array
          items:
            $ref: '#/components/schemas/User'
        video:
          type: string
          example: https://www.youtube.com/watch?v=QZf8vX4DF0A
      required:
        - id
        - name
        - user
        - verifier
        - creators
        - video
    User:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: Gizbro
      required:
        - id
        - name
    Changelog:
      type: object
      required:
        - timestamp
        - list
        - action
        - level
      properties:
        timestamp:
          type: string
          description: ISO 8601-formatted Timestamp of the List
          pattern: /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i
          example: 2022-05-24
        list:
          type: array
          description: State of the List after the changes
          items:
            $ref: '#/components/schemas/Level'
        action:
          type: string
          description: Type of change
          enum: [ADD, MOVE, DELETE]
        level:
          $ref: '#/components/schemas/Level'
        from:
          type: integer
          description: Rank that the level got moved or deleted from
          minimum: 1
        to:
          type: integer
          description: Rank that the level got moved or added to
          minimum: 1

  parameters:
    At:
      in: query
      name: at
      required: false
      description: ISO 8601-formatted Timestamp of the List
      style: form
      schema:
        type: string
        pattern: /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i
      example: 2022-05-24
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access token is valid, but does not have the required permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Default:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  # List
  '/list':
    get:
      summary: Get Levels on List
      description: Retrieves all levels on the list ordered by rank
      operationId: GetList
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/At'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Level'
    post:
      summary: Add/Move Level on List
      description: Add a Level to the List at a given rank. If it is already on the list, it will be moved to the specified rank.
      operationId: PostList
      tags:
        - List
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - level
                - rank
              properties:
                level:
                  type: integer
                  description: Level ID
                rank:
                  type: integer
                  description: (New) position on the list
                  minimum: 1
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        'default':
          $ref: '#/components/responses/Default'
  '/list/{rank}':
    parameters:
      - in: path
        name: rank
        description: Position on the list
        required: true
        schema:
          type: integer
          minimum: 1
    get:
      summary: Get Level by Rank
      description: Retrieves the level at the given rank on the list
      operationId: GetListLevel
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/At'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'
        '404':
          $ref: '#/components/responses/NotFound'
        'default':
          $ref: '#/components/responses/Default'
    delete:
      summary: Delete Level from List
      description: Manually archive a level
      operationId: DeleteListLevel
      tags:
        - List
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        'default':
          $ref: '#/components/responses/Default'
  # Levels
  '/levels':
    get:
      summary: Get Levels
      operationId: GetLevels
      tags:
        - Level
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Level'
    post:
      summary: Create Level
      operationId: PostLevels
      tags:
        - Level
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the level
                  example: Chromatic Haze
                levelId:
                  type: integer
                  description: Level ID in Geometry Dash
                  example: 60587128
                userId:
                  type: number
                  description: ID of the user who published the level
                  example: 3
                verifierId:
                  type: number
                  description: ID of the user who verified the level
                  example: 42
                creatorIds:
                  type: array
                  description: |
                    IDs of the users who created the a part of the level.  
                    If the level was created and published by the same person, this should contain the user id of the publisher.
                  example:
                    - 3
                  items:
                    type: number
                  minItems: 1
                video:
                  type: string
                  description: URL to a video showcasing the level. In most cases this is the verification video.
                  example: https://www.youtube.com/watch?v=QZf8vX4DF0A
                requirement:
                  type: number
                  description: Minimum percentage newly submitted records have to be. Defaults to 100
                  minimum: 0
                  maximum: 100
                  default: 100
                  example: 57.4
                rank:
                  type: integer
                  description: Rank on the List. Level will not be ranked if omitted. Unranked levels can be ranked afterwards.
                  example: 12
                  minimum: 1

              required:
                - name
                - levelId
                - userId
                - verifierId
                - creatorIds
                - video
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        'default':
          $ref: '#/components/responses/Default'
  '/levels/{id}':
    parameters:
      - in: path
        name: id
        description: Level ID
        required: true
        schema:
          type: integer
    get:
      summary: Get Level by ID
      operationId: GetLevel
      tags:
        - Level
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'
        '404':
          $ref: '#/components/responses/NotFound'
  # Users
  '/users':
    get:
      summary: Get Users
      operationId: GetUsers
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  '/users/{id}':
    parameters:
      - in: path
        name: id
        description: User ID
        required: true
        schema:
          type: integer
    get:
      summary: Get User by ID
      operationId: GetUser
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
  '/changelog':
    get:
      summary: Get List Changelog
      operationId: GetChangelog
      tags:
        - Changelog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Changelog'
