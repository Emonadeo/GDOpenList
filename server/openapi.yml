openapi: 3.0.2
servers:
  - url: https://example.com/
info:
  title: GDOL
  version: 2.0.0
  description: API for GDOL
  termsOfService: none
  contact:
    name: Emonadeo
    email: emonadeo@gmail.com
    url: https://github.com/Emonadeo/GDOL
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT.html
externalDocs:
  url: https://github.com/Emonadeo/GDOL
tags:
  - name: List
    description: Everything list related
components:
  schemas:
    Error:
      type: object
      properties:
        error_message:
          type: string
    Level:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: Chromatic Haze
        userName:
          type: string
          example: Cirtrax
        verifierName:
          type: string
          example: Gizbro
        video:
          type: string
          example: https://www.youtube.com/watch?v=QZf8vX4DF0A
  responses:
    Unauthorized:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Access token is valid, but does not have the required permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Default:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  '/list':
    get:
      summary: Get Levels on List
      description: Retrieves all levels on the list ordered by rank
      tags:
        - List
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Level'
    post:
      summary: Add/Move Level on List
      description: Add or Move a Level on the List
      tags:
        - List
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        'default':
          $ref: '#/components/responses/Default'
  '/list/{rank}':
    get:
      summary: Get level by list placement
      description: Retrieves the level at the given rank on the list
      tags:
        - List
      parameters:
        - name: rank
          description: Position on the list
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
        'default':
          $ref: '#/components/responses/Default'
    delete:
      summary: Remove Level from List
      description: Manually archive a level
      tags:
        - List
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        'default':
          $ref: '#/components/responses/Default'
